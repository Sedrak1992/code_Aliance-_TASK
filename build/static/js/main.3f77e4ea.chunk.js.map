{"version":3,"sources":["Components/test.js","App.js","reportWebVitals.js","index.js"],"names":["Test","useState","currentQuestion","setcurentQuestion","score","setscore","showScore","setShovcore","className","state","question","length","type","onClick","question_text","ansver_options","map","a","next","Ansveroption","isCorect","ansvertext","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y0CAgEeA,EA7DF,WAET,MAA6CC,mBAAS,GAAtD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAiCJ,oBAAS,GAA1C,mBAAOK,EAAP,KAAkBC,EAAlB,KAkBA,OACI,8BAIID,EAEE,sBAAKE,UAAW,QAAhB,UACE,mDAAsBJ,EAAtB,KAA+BK,EAAMC,SAASC,OAA9C,SACA,wBAAQC,KAAM,SAAUC,QAdpB,WACZV,EAAkB,GAClBE,EAAS,GACTE,GAAY,IAWJ,8BAGF,qBAAKC,UAAW,OAAhB,SACE,sBAAKA,UAAW,mBAAhB,UACI,sBAAKA,UAAW,oBAAhB,UACI,qBAAKA,UAAW,iBAAhB,SAEI,2CAAcN,EAAkB,EAAhC,SAEJ,qBAAKM,UAAW,gBAAhB,SAAkCC,EAAMC,SAASR,GAAiBY,mBAEtE,qBAAKN,UAAW,UAAhB,SACMC,EAAMC,SAASR,GAAiBa,gBAAkBN,EAAMC,SAASR,GAAiBa,eAAeC,KAAI,SAACC,GACpG,OACI,8BACQ,wBAAQL,KAAM,SAAUC,QAAS,kBA1C9C,SAACI,GAClBA,GACCZ,EAASD,EAAO,GAEpB,IAAMc,EAAOhB,EAAkB,EAC5BgB,EAAOT,EAAMC,SAASC,OACrBR,EAAkBe,GAGlBX,GAAY,GAiCwDY,CAAaF,EAAEG,WAAtD,SAAmEH,EAAEI,4BCvC9FC,MARf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCMSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3f77e4ea.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport state from './test.json'\r\nimport img_1 from './Image/1.jpg'\r\nconst Test = () => {\r\n\r\n    const [currentQuestion, setcurentQuestion] = useState(0)\r\n    const [score, setscore] = useState(0)\r\n    const [showScore, setShovcore] = useState(false)\r\n    const Ansveroption   = (a ) => {\r\n       if(a){\r\n           setscore(score +1)\r\n       }\r\n       const next = currentQuestion + 1\r\n       if(next < state.question.length) {\r\n           setcurentQuestion(next)\r\n       }\r\n       else {\r\n           setShovcore(true)\r\n       }\r\n    }\r\n    const  Refrsh = () => {\r\n        setcurentQuestion(0)\r\n        setscore(0)\r\n        setShovcore(false)\r\n    }\r\n    return (\r\n        <div>\r\n\r\n\r\n        {\r\n            showScore\r\n\r\n            ? <div className={'final'}>\r\n                <div>chisht patasxan {score} /{state.question.length} ic</div>\r\n                <button type={'button'} onClick={Refrsh}>Noric pordzel</button>\r\n            </div>\r\n\r\n            : <div className={'test'}>\r\n                <div className={'test-container-1'}>\r\n                    <div className={'question-contaier'}>\r\n                        <div className={'quastion-count'}>\r\n\r\n                            <span>Harc - {currentQuestion + 1 } </span>\r\n                        </div>\r\n                        <div className={'question-text'}>{state.question[currentQuestion].question_text}</div>\r\n                    </div>\r\n                    <div className={'answers'}>\r\n                        { state.question[currentQuestion].ansver_options && state.question[currentQuestion].ansver_options.map((a) => {\r\n                            return(\r\n                                <div>\r\n                                        <button type={'button'} onClick={() => Ansveroption(a.isCorect) }>{a.ansvertext}</button>\r\n                                </div>\r\n                        )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test;","import './App.css';\nimport Test from \"./Components/test\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}